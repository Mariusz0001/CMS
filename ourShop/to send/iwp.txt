
DROP FUNCTION public.get_productspicturelist(integer);

CREATE OR REPLACE FUNCTION public.get_productspicturelist(
	_idproduct integer)
    RETURNS TABLE("Id" integer, idproduct integer, filename text, path text, ordernumber integer, isenabled boolean) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
	RETURN QUERY
		SELECT     P."Id", 
				   P."IdProduct", 
				   P."FileName"::text,
				   P."Path"::text,
				   P."OrderNumber",
				   P."IsEnabled"
		FROM public."ProductsPicture" P
		WHERE P."IdProduct" = _idProduct
			  AND P."IsEnabled" = TRUE
		ORDER BY P."OrderNumber", P."Id";
	
	END;
$BODY$;

ALTER FUNCTION public.get_productspicturelist(integer)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO ourshopuser;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO postgres;



 DROP TABLE public."ProductsPicture";

CREATE TABLE public."ProductsPicture"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "IdProduct" integer,
    "FileName" character varying(200) COLLATE pg_catalog."default",
    "Path" character varying(200) COLLATE pg_catalog."default",
    "IsEnabled" boolean,
    "OrderNumber" integer,
    "AddedDate" date,
    "AddedBy" character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "ProductsPicture_pkey" PRIMARY KEY ("Id"),
    CONSTRAINT "picUnique" UNIQUE ("FileName", "Path", "IsEnabled")
)

TABLESPACE pg_default;

ALTER TABLE public."ProductsPicture"
    OWNER to postgres;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE public."ProductsPicture" TO ourshopuser;

GRANT ALL ON TABLE public."ProductsPicture" TO postgres;




CREATE OR REPLACE FUNCTION public.get_productslistconfiguration(
	_userid integer DEFAULT NULL::integer)
    RETURNS TABLE("Id" integer, idcategoriesbook integer, idproductsstatusbook integer, idtaxpercentagesbook integer, categoryname text, statusname text, taxvalue integer, "Name" text, barcode text, price double precision, qty integer, description text, "PicturePath" text)
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
	RETURN QUERY	
	  	    SELECT p."Id",
				   p."IdCategoriesBook",
				   p."IdProductsStatusBook",
				   p."IdTaxPercentagesBook",
				   CB."Name"::text as CategoryName,
				   PSB."Name"::text as StatusName,
				   TPB."Value"::integer as TaxValue,
				   p."Name"::text,
				   p."Barcode"::text,
				   p."Price",
				   p."QTY",
				   p."Description"::text,
				   (SELECT PP."Path"::text
					FROM public."ProductsPicture" PP 
					WHERE PP."IdProduct" = P."Id"
						AND PP."IsEnabled" = TRUE
					ORDER BY PP."OrderNumber" ASC
					LIMIT 1) AS PicturePath
			FROM public."Products" P
			LEFT OUTER JOIN public."CategoriesBook" CB ON CB."Id" = p."IdCategoriesBook" 
			LEFT OUTER JOIN public."ProductsStatusBook" PSB ON PSB."Id" = p."IdProductsStatusBook" AND PSB."Name" = 'Exposed'
			LEFT OUTER JOIN public."TaxPercentagesBook" TPB ON TPB."Id" = p."IdTaxPercentagesBook";
			
	END;
$BODY$;

ALTER FUNCTION public.get_productslistconfiguration( integer)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.get_productslistconfiguration( integer) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.get_productslistconfiguration( integer) TO ourshopuser;

GRANT EXECUTE ON FUNCTION public.get_productslistconfiguration( integer) TO postgres;

