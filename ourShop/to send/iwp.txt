
CREATE OR REPLACE FUNCTION public.get_productspicturelist(
	_idproduct integer)
    RETURNS TABLE("Id" integer, idproduct integer, filename text, path text, ordernumber integer) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
	RETURN QUERY
		SELECT     P."Id", 
				   P."IdProduct", 
				   P."FileName"::text,
				   P."Path"::text,
				   P."OrderNumber"
		FROM public."ProductsPicture" P
		WHERE P."IdProduct" = _idProduct
			  AND P."IsEnabled" = TRUE
		ORDER BY P."OrderNumber", P."Id";
	
	END;
$BODY$;

ALTER FUNCTION public.get_productspicturelist(integer)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO ourshopuser;

GRANT EXECUTE ON FUNCTION public.get_productspicturelist(integer) TO postgres;




 DROP TABLE public."ProductsPicture";

CREATE TABLE public."ProductsPicture"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "IdProduct" integer,
    "FileName" character varying(200) COLLATE pg_catalog."default",
    "Path" character varying(200) COLLATE pg_catalog."default",
    "IsEnabled" boolean,
    "OrderNumber" integer,
    "AddedDate" date,
    "AddedBy" character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "ProductsPicture_pkey" PRIMARY KEY ("Id"),
    CONSTRAINT "picUnique" UNIQUE ("FileName", "Path", "IsEnabled")
)

TABLESPACE pg_default;

ALTER TABLE public."ProductsPicture"
    OWNER to postgres;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE public."ProductsPicture" TO ourshopuser;

GRANT ALL ON TABLE public."ProductsPicture" TO postgres;

